import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
  // intl: ^0.18.1
void main() {
  runApp(TicketBookingApp());
}

class TicketBookingApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Ticket Booking',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: TicketListScreen(),
    );
  }
}

class Ticket {
  String name;
  String destination;
  DateTime journeyDate;

  Ticket({required this.name, required this.destination, required this.journeyDate});
}

class TicketListScreen extends StatefulWidget {
  @override
  _TicketListScreenState createState() => _TicketListScreenState();
}

class _TicketListScreenState extends State<TicketListScreen> {
  List<Ticket> tickets = [];

  void _addOrEditTicket({Ticket? ticket, int? index}) async {
    final result = await showDialog<Ticket>(
      context: context,
      builder: (context) => TicketDialog(ticket: ticket),
    );
    if (result != null) {
      setState(() {
        if (index != null) {
          tickets[index] = result;
        } else {
          tickets.add(result);
        }
      });
    }
  }

  void _deleteTicket(int index) {
    setState(() {
      tickets.removeAt(index);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Ticket Booking')),
      body: tickets.isEmpty
          ? Center(child: Text('No tickets booked'))
          : ListView.builder(
              itemCount: tickets.length,
              itemBuilder: (context, index) {
                final ticket = tickets[index];
                return Card(
                  child: ListTile(
                    title: Text(ticket.name),
                    subtitle: Text('${ticket.destination}\n${DateFormat('yyyy-MM-dd').format(ticket.journeyDate)}'),
                    onTap: () => _addOrEditTicket(ticket: ticket, index: index),
                    trailing: IconButton(
                      icon: Icon(Icons.delete, color: Colors.red),
                      onPressed: () => _deleteTicket(index),
                    ),
                  ),
                );
              },
            ),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        onPressed: () => _addOrEditTicket(),
      ),
    );
  }
}

class TicketDialog extends StatefulWidget {
  final Ticket? ticket;
  TicketDialog({this.ticket});

  @override
  _TicketDialogState createState() => _TicketDialogState();
}

class _TicketDialogState extends State<TicketDialog> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _destinationController;
  DateTime? _selectedDate;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.ticket?.name ?? '');
    _destinationController = TextEditingController(text: widget.ticket?.destination ?? '');
    _selectedDate = widget.ticket?.journeyDate;
  }

  @override
  void dispose() {
    _nameController.dispose();
    _destinationController.dispose();
    super.dispose();
  }

  void _pickDate() async {
    DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime(2100),
    );
    if (pickedDate != null) {
      setState(() {
        _selectedDate = pickedDate;
      });
    }
  }

  void _saveTicket() {
    if (_formKey.currentState!.validate() && _selectedDate != null) {
      final newTicket = Ticket(
        name: _nameController.text,
        destination: _destinationController.text,
        journeyDate: _selectedDate!,
      );
      Navigator.pop(context, newTicket);
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(widget.ticket == null ? 'Book Ticket' : 'Edit Ticket'),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextFormField(
              controller: _nameController,
              decoration: InputDecoration(labelText: 'Passenger Name'),
              validator: (value) => value!.isEmpty ? 'Please enter a name' : null,
            ),
            TextFormField(
              controller: _destinationController,
              decoration: InputDecoration(labelText: 'Destination'),
              validator: (value) => value!.isEmpty ? 'Please enter a destination' : null,
            ),
            SizedBox(height: 10),
            Row(
              children: [
                Expanded(
                  child: Text(
                    _selectedDate == null
                        ? 'Select Journey Date'
                        : 'Date: ${DateFormat('yyyy-MM-dd').format(_selectedDate!)}',
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.calendar_today),
                  onPressed: _pickDate,
                ),
              ],
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: _saveTicket,
          child: Text('Save'),
        ),
      ],
    );
  }
}



/*
ðŸŒ³ WIDGET TREE STRUCTURE + PURPOSE

TicketBookingApp (StatelessWidget)
â”œâ”€â”€ MaterialApp
â”‚   â”œâ”€â”€ title â†’ 'Ticket Booking'
â”‚   â”œâ”€â”€ debugShowCheckedModeBanner: false â†’ hides debug banner
â”‚   â”œâ”€â”€ theme â†’ sets app theme with primarySwatch
â”‚   â””â”€â”€ home â†’ TicketListScreen

TicketListScreen (StatefulWidget)
â””â”€â”€ Scaffold
    â”œâ”€â”€ AppBar â†’ displays 'Ticket Booking' title
    â”œâ”€â”€ body:
    â”‚   â”œâ”€â”€ if tickets.isEmpty
    â”‚   â”‚   â””â”€â”€ Center â†’ displays fallback 'No tickets booked'
    â”‚   â””â”€â”€ else:
    â”‚       â””â”€â”€ ListView.builder
    â”‚           â”œâ”€â”€ iterates over tickets list
    â”‚           â””â”€â”€ Card (for each ticket)
    â”‚               â””â”€â”€ ListTile
    â”‚                   â”œâ”€â”€ title â†’ ticket.name
    â”‚                   â”œâ”€â”€ subtitle â†’ destination + formatted date
    â”‚                   â”œâ”€â”€ onTap â†’ opens TicketDialog to edit ticket
    â”‚                   â””â”€â”€ trailing IconButton â†’ delete ticket
    â””â”€â”€ floatingActionButton
        â””â”€â”€ Icon(Icons.add) â†’ opens TicketDialog to add new ticket

TicketDialog (StatefulWidget inside showDialog)
â””â”€â”€ AlertDialog
    â”œâ”€â”€ title â†’ 'Book Ticket' or 'Edit Ticket'
    â”œâ”€â”€ content â†’ Form
    â”‚   â””â”€â”€ Column (mainAxisSize: min)
    â”‚       â”œâ”€â”€ TextFormField (Name input)
    â”‚       â”œâ”€â”€ TextFormField (Destination input)
    â”‚       â””â”€â”€ Row
    â”‚           â”œâ”€â”€ Text â†’ Shows selected date or 'Select Journey Date'
    â”‚           â””â”€â”€ IconButton â†’ opens DatePicker
    â””â”€â”€ actions:
        â”œâ”€â”€ TextButton â†’ Cancel and close dialog
        â””â”€â”€ ElevatedButton â†’ Save ticket and return it via Navigator.pop

FUNCTIONAL FLOW:
- _addOrEditTicket() â†’ opens dialog to add/edit a ticket
- _deleteTicket() â†’ removes ticket at given index
- _pickDate() â†’ shows DatePicker and stores selected date
- _saveTicket() â†’ validates form, creates new Ticket, and pops it

DATA MODEL:
- Ticket(name, destination, journeyDate)

STATE:
- List<Ticket> tickets â†’ stores all added tickets
- TextEditingControllers for form input
- _selectedDate â†’ stores picked date in dialog

UTILITIES:
- intl package used for date formatting (yyyy-MM-dd)

INTERACTION FLOW:
1. User presses âž• FAB â†’ opens dialog to book ticket
2. User fills form and picks date â†’ taps Save
3. Ticket added to list and shown in ListView
4. User taps ticket â†’ edits in dialog
5. User taps ðŸ—‘ â†’ deletes ticket
*/
