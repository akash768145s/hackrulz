import 'package:flutter/material.dart';

void main() {
  runApp(EventManagementApp());
}

class EventManagementApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Event Management',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: EventListScreen(),
    );
  }
}

class Event {
  String title;
  String date;
  String time;
  String location;
  String description;

  Event({
    required this.title,
    required this.date,
    required this.time,
    required this.location,
    required this.description,
  });
}

class EventListScreen extends StatefulWidget {
  @override
  _EventListScreenState createState() => _EventListScreenState();
}

class _EventListScreenState extends State<EventListScreen> {
  List<Event> events = [];

  void _addOrEditEvent({Event? event, int? index}) async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => EventFormScreen(event: event),
      ),
    );
    if (result != null) {
      setState(() {
        if (index != null) {
          events[index] = result;
        } else {
          events.add(result);
        }
      });
    }
  }

  void _deleteEvent(int index) {
    setState(() {
      events.removeAt(index);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Event Management')),
      body: events.isEmpty
          ? Center(child: Text('No events available'))
          : ListView.builder(
              itemCount: events.length,
              itemBuilder: (context, index) {
                final event = events[index];
                return Card(
                  child: ListTile(
                    title: Text(event.title),
                    subtitle: Text(
                        '${event.date} at ${event.time}\n${event.location}'),
                    onTap: () => _addOrEditEvent(event: event, index: index),
                    trailing: IconButton(
                      icon: Icon(Icons.delete, color: Colors.red),
                      onPressed: () => _deleteEvent(index),
                    ),
                  ),
                );
              },
            ),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        onPressed: () => _addOrEditEvent(),
      ),
    );
  }
}

class EventFormScreen extends StatefulWidget {
  final Event? event;
  EventFormScreen({this.event});

  @override
  _EventFormScreenState createState() => _EventFormScreenState();
}

class _EventFormScreenState extends State<EventFormScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _titleController;
  late TextEditingController _dateController;
  late TextEditingController _timeController;
  late TextEditingController _locationController;
  late TextEditingController _descriptionController;

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController(text: widget.event?.title ?? '');
    _dateController = TextEditingController(text: widget.event?.date ?? '');
    _timeController = TextEditingController(text: widget.event?.time ?? '');
    _locationController =
        TextEditingController(text: widget.event?.location ?? '');
    _descriptionController =
        TextEditingController(text: widget.event?.description ?? '');
  }

  @override
  void dispose() {
    _titleController.dispose();
    _dateController.dispose();
    _timeController.dispose();
    _locationController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  void _saveEvent() {
    if (_formKey.currentState!.validate()) {
      final newEvent = Event(
        title: _titleController.text,
        date: _dateController.text,
        time: _timeController.text,
        location: _locationController.text,
        description: _descriptionController.text,
      );
      Navigator.pop(context, newEvent);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
          title: Text(widget.event == null ? 'Add Event' : 'Edit Event')),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _titleController,
                decoration: InputDecoration(labelText: 'Title'),
                validator: (value) =>
                    value!.isEmpty ? 'Please enter a title' : null,
              ),
              TextFormField(
                controller: _dateController,
                decoration: InputDecoration(labelText: 'Date'),
                validator: (value) =>
                    value!.isEmpty ? 'Please enter a date' : null,
              ),
              TextFormField(
                controller: _timeController,
                decoration: InputDecoration(labelText: 'Time'),
                validator: (value) =>
                    value!.isEmpty ? 'Please enter a time' : null,
              ),
              TextFormField(
                controller: _locationController,
                decoration: InputDecoration(labelText: 'Location'),
                validator: (value) =>
                    value!.isEmpty ? 'Please enter a location' : null,
              ),
              TextFormField(
                controller: _descriptionController,
                decoration: InputDecoration(labelText: 'Description'),
                validator: (value) =>
                    value!.isEmpty ? 'Please enter a description' : null,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _saveEvent,
                child: Text('Save Event'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

/*
ðŸŒ³ WIDGET TREE STRUCTURE + PURPOSE

EventManagementApp (StatelessWidget)
â”œâ”€â”€ MaterialApp
â”‚   â”œâ”€â”€ title: 'Event Management'
â”‚   â”œâ”€â”€ theme: Blue color scheme
â”‚   â””â”€â”€ home â†’ EventListScreen

EventListScreen (StatefulWidget)
â””â”€â”€ Scaffold
    â”œâ”€â”€ AppBar â†’ Title: "Event Management"
    â”œâ”€â”€ body:
    â”‚   â”œâ”€â”€ if events.isEmpty â†’ Center â†’ Text("No events available")
    â”‚   â””â”€â”€ else â†’ ListView.builder
    â”‚       â””â”€â”€ Card (for each event)
    â”‚           â””â”€â”€ ListTile
    â”‚               â”œâ”€â”€ title: event.title
    â”‚               â”œâ”€â”€ subtitle: event.date + time + location
    â”‚               â”œâ”€â”€ onTap â†’ opens EventFormScreen for editing
    â”‚               â””â”€â”€ trailing: IconButton (delete)
    â””â”€â”€ floatingActionButton â†’ FAB with "+" icon
        â””â”€â”€ onPressed â†’ opens EventFormScreen for adding new event

EventFormScreen (StatefulWidget)
â””â”€â”€ Scaffold
    â”œâ”€â”€ AppBar â†’ Title: "Add Event" or "Edit Event"
    â””â”€â”€ body: Padding
        â””â”€â”€ Form (keyed by _formKey)
            â””â”€â”€ Column
                â”œâ”€â”€ TextFormField (_titleController) â†’ Event Title
                â”œâ”€â”€ TextFormField (_dateController) â†’ Date
                â”œâ”€â”€ TextFormField (_timeController) â†’ Time
                â”œâ”€â”€ TextFormField (_locationController) â†’ Location
                â”œâ”€â”€ TextFormField (_descriptionController) â†’ Description
                â”œâ”€â”€ SizedBox â†’ spacing
                â””â”€â”€ ElevatedButton (Save Event)
                    â””â”€â”€ onPressed â†’ validates form and pops new/edited event

ðŸ§  FUNCTIONAL FLOW:

- _addOrEditEvent() â†’ Opens EventFormScreen via Navigator.push and updates state
- _deleteEvent() â†’ Removes event from the list
- _saveEvent() â†’ Validates form, creates Event, returns it via Navigator.pop

ðŸ“¦ DATA MODEL:

Event {
  title: String,
  date: String,
  time: String,
  location: String,
  description: String
}

ðŸŽ¯ USER FLOW:

1. User taps âž• â†’ goes to EventFormScreen to add
2. User taps on event â†’ edits the entry
3. User taps ðŸ—‘ â†’ deletes the event
4. Events shown in list with date/time/location summary
*/
