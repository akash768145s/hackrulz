import 'package:flutter/material.dart';

void main() {
  runApp(ExpenseManagerApp());
}

class ExpenseManagerApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Expense Manager',
      theme: ThemeData(
        primarySwatch: Colors.green,
      ),
      home: ExpenseListScreen(),
    );
  }
}

class ExpenseListScreen extends StatefulWidget {
  @override
  _ExpenseListScreenState createState() => _ExpenseListScreenState();
}

class _ExpenseListScreenState extends State<ExpenseListScreen> {
  final List<Map<String, String>> expenses = [];
  final TextEditingController titleController = TextEditingController();
  final TextEditingController amountController = TextEditingController();

  void _addExpense() {
    if (titleController.text.isNotEmpty && amountController.text.isNotEmpty) {
      setState(() {
        expenses.add({
          'title': titleController.text,
          'amount': amountController.text,
        });
      });
      titleController.clear();
      amountController.clear();
      Navigator.of(context).pop();
    }
  }

  void _showAddExpenseDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Add Expense'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: titleController,
              decoration: InputDecoration(labelText: 'Expense Title'),
            ),
            TextField(
              controller: amountController,
              decoration: InputDecoration(labelText: 'Amount'),
              keyboardType: TextInputType.number,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: _addExpense,
            child: Text('Add'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Expense Manager')),
      body: expenses.isEmpty
          ? Center(child: Text('No expenses added yet.'))
          : ListView.builder(
              itemCount: expenses.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(expenses[index]['title']!,
                      style:
                          TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  subtitle: Text('Amount: \$${expenses[index]['amount']!}',
                      style: TextStyle(fontSize: 16)),
                );
              },
            ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddExpenseDialog,
        child: Icon(Icons.add),
      ),
    );
  }
}
/*
ðŸŒ³ WIDGET TREE STRUCTURE + PURPOSE

ExpenseManagerApp (StatelessWidget)
â”œâ”€â”€ MaterialApp
â”‚   â”œâ”€â”€ title â†’ 'Expense Manager'
â”‚   â”œâ”€â”€ theme â†’ Green primary swatch
â”‚   â””â”€â”€ home â†’ ExpenseListScreen (StatefulWidget)

ExpenseListScreen (StatefulWidget)
â””â”€â”€ Scaffold
    â”œâ”€â”€ AppBar
    â”‚   â””â”€â”€ Text â†’ "Expense Manager"
    â”œâ”€â”€ body
    â”‚   â”œâ”€â”€ If expenses.isEmpty
    â”‚   â”‚   â””â”€â”€ Center â†’ Text("No expenses added yet.")
    â”‚   â””â”€â”€ Else â†’ ListView.builder
    â”‚       â””â”€â”€ ListTile (for each expense)
    â”‚           â”œâ”€â”€ title â†’ Expense title (bold, larger font)
    â”‚           â””â”€â”€ subtitle â†’ Expense amount in dollars (smaller font)
    â””â”€â”€ floatingActionButton
        â””â”€â”€ Icon(Icons.add)
            â””â”€â”€ onPressed: _showAddExpenseDialog()

ðŸ§¾ ADD EXPENSE DIALOG
Triggered via `_showAddExpenseDialog()` when FAB is tapped:
- AlertDialog
  â”œâ”€â”€ title: "Add Expense"
  â”œâ”€â”€ content: Column with 2 TextFields
  â”‚   â”œâ”€â”€ titleController â†’ for expense name
  â”‚   â””â”€â”€ amountController â†’ for expense amount (number input)
  â””â”€â”€ actions:
      â”œâ”€â”€ TextButton "Cancel" â†’ closes dialog
      â””â”€â”€ ElevatedButton "Add" â†’ triggers _addExpense()

ðŸ§  STATE MANAGEMENT
- `List<Map<String, String>> expenses` â†’ Stores expense records
- `titleController` and `amountController` â†’ Input fields for expense data
- `setState()` is used to update UI when a new expense is added

ðŸ’¡ USER FLOW
1. User taps âž• FAB â†’ sees dialog to add new expense
2. Inputs title and amount, taps "Add"
3. Expense appears in the list
4. If no expenses, fallback text is shown instead

ðŸŽ¯ PURPOSE
- Manage personal expenses using a lightweight form
- Clear layout with ListTiles and AlertDialog
- Simple state-driven list without external storage

*/
